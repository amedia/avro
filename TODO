 go test -coverpkg ./... -coverprofile /tmp/prof.out ./... && go tool cover -html /tmp/prof.out

Tests still to do:

	union with more than two types that includes nil
	false boolean
	out of bounds cases
	fuzzing
	zero length byte read
	zero length string read
	recursive types

	multiple inData, outData instances per generated test package.

	many error cases:
		see coverage.

Features still to do:

- String/MarshalText/UnmarshalText methods on enums
- support normal Go types without AvroRecord methods.
	- what do we do about interface{} values?
		We're filling in the whole thing from a known schema, so we could
		fill in the holes with pieces from the writer's schema,
		and record the entire schema at the top level:

		package avro

		type Dynamic struct {
			schema string
			value interface{}
		}

		func (d Dynamic) Schema() string

- support for logical types.
	- we'd like to use time.Time but that won't look correct
	when converted to JSON
	-
- registry support
	- https://docs.confluent.io/current/schema-registry/serializer-formatter.html
- use nil for maps and slices instead of pointers
- optimisation:
	- cache type to unmarshaler mapping
	- sync.Pool
	initially, maybe just have a map of (type, schema) -> program
- Codec
- Encoder
- Decoder
- think about non-record types at the top level of a schema
- better namespace support
	- command-line flag to control mapping of namespaces to directories
- JSON marshaling and unmarshaling
	- need to decide whether to use standard Avro JSON format
	for all cases, even though it doesn't correspond with standard
	representation.
	- alternative JSON representation:
		for unions, if all cases are distinguishable by looking at the
		top level JSON type of the non-union JSON representation
		(e.g. number vs string vs bool vs object vs null vs array)
		then encode directly in the value.
	- could also allow representation of timestamps as RFC3339 strings
- make Unmarshal fail if there are extra bytes in the data.

// NewEncoder returns a new Encoder instance that encodes
// a stream of messages into r using the given schema.
// All messages encoded must have the same Avro schema.
//
// By default, it encodes the Avro object container file (OCF) format,
// writing the schema header when the first value is encoded.
func NewEncoder(w io.Writer, schema string) *Encoder

// Encode writes a message to the encoder.
// All messages must have the same Avro schema.
func (enc *Encoder) Encode(x interface{}) error

// OmitHeader specifies that no file header should be written,
// just the encoded values themselves without the schema.
func (enc *Encoder) OmitHeader()

// UseJSON causes gthe header and messages to be encoded to the stream
// in Avro JSON encoding instead of binary.
// See https://avro.apache.org/docs/1.8.2/spec.html#json_encoding
func (enc *Encoder) UseJSON()

type Decoder struct {
	readerSchema schema.AvroType
	progs        map[reflect.Type]*program
}

// NewDecoder returns a new Decoder instance that
// decodes a stream of messages from r.
// By default it decodes the Avro object container
// file (OCF) format, setting the schema by reading it
// from the start of the file.
// See https://avro.apache.org/docs/1.8.2/spec.html#Object+Container+Files
func NewDecoder(r io.Reader) *Decoder

// SetSchema sets the schema used to decode the
// message stream. If this is called before any messages
// are read, the decoder will not read the OCF
// header.
func (dec *Decoder) SetSchema(schema string) error

// SetJSON causes messages to be decoded from the
// Avro JSON encoding instead of binary.
// See https://avro.apache.org/docs/1.8.2/spec.html#json_encoding
func (dec *Decoder) UseJSON()

// Buffered returns a reader of the data remaining in the Decoder's
// buffer. The reader is valid until the next call to Decode.
func (dec *Decoder) Buffered() io.Reader

// Decode decodes the next value into x, which should
// be a pointer to an Avro-compatible type (see
// Unmarshal for further details).
func (dec *Decoder) Decode(x interface{}) error


// Marshal marshals the given value and returns the resulting
// message.
func (u *Codec) Marshal(ctx context.Context, x interface{}) ([]byte, error)

// SchemaGetter is used by an Unmarshaler to find information
// about the schema used to encode a message.
// One notable implementation is avroregistry.Registry.
type SchemaGetter interface {
	...
	// IDForSchema returns an id for the given schema.
	IDForSchema(ctx context.Context, schema string) (int64, error)
}

---------------------------------------------------------
logical types:

decimal variable-length:

{
  "type": "bytes",
  "logicalType": "decimal",
  "precision": 4,
  "scale": 2
}

decimal fixed-length:

{
  "type": "fixed",
  "name": "somename",
  "logicalType": "decimal",
  "precision": 4,
  "scale": 2,
  "size": 10
}

uuid:
{
	"type": "string"
	"logicalType": "uuid"
}

date:
{
	"type": "int"
	"logicalType": "data"
}

millisecond time of day (time after midnight):
{
	"type": "int"
	"logicalType": "time-millis"
}

microsecond time of day (time after midnight):
{
	"type": "long"
	"logicalType": "time-micros"
}


millisecond timestamp (from unix epoch)
{
	"type": "int"
	"logicalType": "timestamp-millis"
}

microsecond timestamp (from unix epoch)
{
	"type": "int"
	"logicalType": "timestamp-micros"
}

duration:
A duration logical type annotates Avro fixed type of size 12, which stores three little-endian unsigned integers that represent durations at different granularities of time. The first stores a number in months, the second stores a number in days, and the third stores a number in milliseconds.
{
	"type": "fixed"
	"size": 12
	"name": "duration"
	"logicalType": "duration"
}

the problem with the duration logical type is that it must be different everywhere,
which makes it not very useful for interoperability between different Avro schemas.
Perhaps define a standard avro.Duration type and ignore any definition name?

Could support another logical type, say duration-nanos
to encode Go-style durations. Use a long.

Also, what about timestamp-nanos, perhaps as a 12 byte fixed type
(8 bytes of seconds; 4 bytes of nanoseconds).

Of the above types,


---------------------------------------------------------

// CompatMode defines a compatiblity mode used for checking Avro
// type compatibility.
type CompatMode int

const (
	Backward CompatMode = 1<<iota
	Forward
	Transitive

	BackwardTransitive = Backward | Transitive
	ForwardTransitive = Forward | Transitive
	Full = Backward | Forward
	FullTransitive = Full | Transitive
)

// Compatible checks whether t is compatible with all the previous schemas
// with respect to the given compatibility mode. The previousSchemas
// slice is in oldest-to-newest order.
//
// If mode doesn't include Transitive, only the latest schema is checked.
func (t *Type) Compatible(mode CompatMode, previousSchemas ...*Type) error

// Subsumes reports whether all the information in a value of Avro type t1
// can be encoded using type t without loss.
func (t *Type) Subsumes(t1 *Type) bool
